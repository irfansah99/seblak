generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Product {
  id          BigInt        @id @default(autoincrement())
  name        String        @db.VarChar
  slug        String        @unique @db.VarChar
  kategori    String        @db.VarChar
  price       Float
  stok        Float
  imageSrc    String        @db.VarChar
  created_at  DateTime      @default(now()) @db.Timestamptz(6)
  cartDetails Cart_detail[]
}

model Cart {
  id           BigInt        @id @default(autoincrement())
  user_id      String
  status       String        @default("pending")
  total_barang Int           @default(0)
  total_harga  Decimal       @default(0.00) @db.Decimal(10, 2)
  created_at   DateTime      @default(now()) @db.Timestamptz(6)
  updated_at   DateTime      @updatedAt
  user         User          @relation(fields: [user_id], references: [id])
  details      Cart_detail[]
  transaksi    transaksi?
}

model Cart_detail {
  id         BigInt   @id @default(autoincrement())
  cart_id    BigInt
  product_id BigInt
  jumlah     Int      @default(1)
  level      Int?
  ukuran     String   @db.VarChar
  subtotal   Decimal  @db.Decimal(10, 2)
  created_at DateTime @default(now()) @db.Timestamptz(6)
  cart       Cart     @relation(fields: [cart_id], references: [id])
  product    Product  @relation(fields: [product_id], references: [id])
}

model transaksi {
  id          BigInt   @id @default(autoincrement())
  cart_id     BigInt   @unique
  jumlah      Int      @default(1)
  total_bayar Decimal  @db.Decimal(10, 2)
  status      String   @default("pending")
  created_at  DateTime @default(now()) @db.Timestamptz(6)
  updated_at  DateTime @updatedAt
  cart        Cart     @relation(fields: [cart_id], references: [id])
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  password      String?
  role          String    @default("user")
  carts         Cart[]
  accounts      Account[]
  sessions      Session[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}
